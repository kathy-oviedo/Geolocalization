# Clusterización para agrupar direcciones por cercanía

import pandas as pd
from sklearn.cluster import AgglomerativeClustering
from sklearn.preprocessing import StandardScaler

# Cargar el archivo con las coordenadas obtenidas
data = pd.read_excel('output_file_with_coordinates.xlsx')

# Parámetros para agrupación
max_grupos = 60  # Usamos un número mayor de clusters inicialmente
max_direcciones_por_grupo = 30

# Escalar las coordenadas
scaler = StandardScaler()
coords_scaled = scaler.fit_transform(data[['Latitud', 'Longitud']])

# Aplicar Agglomerative Clustering para un número mayor de clusters
agglo = AgglomerativeClustering(n_clusters=max_grupos, affinity='euclidean', linkage='ward')
data['Grupo_Temporal'] = agglo.fit_predict(coords_scaled)

# Ajustar los grupos para que cada uno tenga un máximo de 30 direcciones
final_grupos = []
grupo_id = 0

# Recorremos cada grupo temporal y dividimos si es necesario
for grupo in data['Grupo_Temporal'].unique():
    subgrupo = data[data['Grupo_Temporal'] == grupo]
    # Dividimos el subgrupo en porciones de máximo 30 direcciones
    for i in range(0, len(subgrupo), max_direcciones_por_grupo):
        subgrupo_segmento = subgrupo.iloc[i:i + max_direcciones_por_grupo].copy()
        subgrupo_segmento['Grupo_Final'] = grupo_id
        final_grupos.append(subgrupo_segmento)
        grupo_id += 1

# Concatenar los subgrupos y guardar el resultado
data_final = pd.concat(final_grupos)
data_final.to_excel('Geo_grouped_40_clusters_max30.xlsx', index=False)
print("Archivo agrupado en 40 grupos de proximidad con máximo 30 direcciones guardado como 'Geo_grouped_40_clusters_max30.xlsx'")
